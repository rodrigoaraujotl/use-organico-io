"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const message_1 = require("./message");
const changelogFile = "CHANGELOG.md";
const defaultOptions = {
    changeVersion: true,
};
/**
 * Makes changes to CHANGELOG consistent with keepachangelog standard
 */
function keepachangelog(options = defaultOptions) {
    var _a;
    return __awaiter(this, void 0, void 0, function* () {
        const changeVersion = (_a = options.changeVersion) !== null && _a !== void 0 ? _a : true;
        const pr = danger.github.pr;
        const hasChangelog = danger.git.modified_files.includes(changelogFile);
        const isTrivial = (pr.body + pr.title).includes("#trivial");
        if (isTrivial) {
            return;
        }
        if (!hasChangelog) {
            fail(message_1.noChangelog(changeVersion), changelogFile);
            return;
        }
        // Check if a line with a version bump was added as one of the CHANGELOG.md changes
        const changelogChanges = yield getAddedChangelogLines();
        const newVersionLine = findNewVersionLine(changelogChanges);
        if (!newVersionLine && changeVersion === true) {
            fail(message_1.missingVersion, changelogFile);
        }
        if (newVersionLine && changeVersion === false) {
            fail(message_1.removeVersionChange(newVersionLine), changelogFile);
        }
        const sectionLine = findSection(changelogChanges);
        if (!sectionLine) {
            fail(message_1.noSection(changeVersion), changelogFile);
        }
    });
}
exports.keepachangelog = keepachangelog;
const sectionLine = /### [Added|Changed|Deprecated|Removed|Fixed|Security]/;
function findSection(changelogChanges) {
    return changelogChanges.find(line => sectionLine.test(line));
}
function getAddedChangelogLines() {
    return __awaiter(this, void 0, void 0, function* () {
        const result = yield danger.git.diffForFile(changelogFile);
        return result.added.split("\n").map(line => line.slice(1));
    });
}
const newVersionLine = /## \[[0-9]/;
function findNewVersionLine(changelogChanges) {
    return changelogChanges.find(line => newVersionLine.test(line));
}
