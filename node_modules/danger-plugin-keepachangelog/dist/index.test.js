"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const index_1 = require("./index");
const message_1 = require("./message");
describe("keepachangelog()", () => {
    beforeEach(() => {
        global.warn = jest.fn();
        global.message = jest.fn();
        global.fail = jest.fn();
        global.markdown = jest.fn();
    });
    afterEach(() => {
        global.warn = undefined;
        global.message = undefined;
        global.fail = undefined;
        global.markdown = undefined;
    });
    it("skip if trivial", () => {
        global.danger = {
            git: { modified_files: [] },
            github: {
                pr: { title: "#trivial title", body: "body" }
            }
        };
        index_1.keepachangelog();
        expect(global.fail).not.toHaveBeenCalled();
    });
    it("fail if there's no changelog changes", () => {
        global.danger = {
            git: { modified_files: [] },
            github: {
                pr: { title: "title", body: "body" }
            }
        };
        index_1.keepachangelog();
        expect(global.fail).toHaveBeenCalledWith(message_1.noChangelog(true), "CHANGELOG.md");
    });
    it("fail if there's no new version line", () => __awaiter(void 0, void 0, void 0, function* () {
        global.danger = {
            git: {
                modified_files: ["CHANGELOG.md"],
                diffForFile: jest.fn(() => {
                    return Promise.resolve({
                        added: "+- Translation.\n+"
                    });
                })
            },
            github: {
                pr: { title: "title", body: "body" }
            }
        };
        yield index_1.keepachangelog();
        expect(global.fail).toHaveBeenCalledWith(message_1.noSection(true), "CHANGELOG.md");
    }));
    it("fail if there's no section", () => __awaiter(void 0, void 0, void 0, function* () {
        global.danger = {
            git: {
                modified_files: ["CHANGELOG.md"],
                diffForFile: jest.fn(() => {
                    return Promise.resolve({
                        added: "+## [1.0.1] - 2020-03-20\n+- Translation.\n+"
                    });
                })
            },
            github: {
                pr: { title: "title", body: "body" }
            }
        };
        yield index_1.keepachangelog();
        expect(global.fail).toHaveBeenCalledWith(message_1.noSection(true), "CHANGELOG.md");
    }));
    it("fail if there's version change when versionLine option is false", () => __awaiter(void 0, void 0, void 0, function* () {
        global.danger = {
            git: {
                modified_files: ["CHANGELOG.md"],
                diffForFile: jest.fn(() => {
                    return Promise.resolve({
                        added: "+## [1.0.1] - 2020-03-20\n+### Fixed\n+- Translation.\n+"
                    });
                })
            },
            github: {
                pr: { title: "title", body: "body" }
            }
        };
        yield index_1.keepachangelog({ changeVersion: false });
        expect(global.fail).toHaveBeenCalledWith(message_1.removeVersionChange("## [1.0.1] - 2020-03-20"), "CHANGELOG.md");
    }));
});
